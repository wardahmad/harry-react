{"version":3,"sources":["House.js","Character.js","DB.js","App.js","serviceWorker.js","index.js"],"names":["House","this","props","house","houseName","src","imgSrc","founder","element","Component","Character","char","charName","houses","notableCharacter","App","state","currentIndex","e","setState","className","onClick","nextHouse","showCharacter","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+NAeeA,G,uLAXX,OACE,6BACE,4BAAKC,KAAKC,MAAMC,MAAMC,WACtB,yBAAKC,IAAKJ,KAAKC,MAAMC,MAAMG,SAC3B,uCAAaL,KAAKC,MAAMC,MAAMI,SAC9B,uCAAaN,KAAKC,MAAMC,MAAMK,c,GAPlBC,cCYLC,E,iLATX,OACE,6BACE,4BAAKT,KAAKC,MAAMS,KAAKC,UACrB,yBAAKP,IAAKJ,KAAKC,MAAMS,KAAKL,c,GALVG,aCuCTI,EA1CA,CAAC,CACZT,UAAW,YACXE,OAAQ,8IACRC,QAAS,oBACTC,QAAS,QACTM,iBAAkB,CACdF,SAAU,eACVN,OAAQ,gFAGhB,CACIF,UAAW,YACXE,OAAQ,2IACRC,QAAS,mBACTC,QAAS,MACTM,iBAAkB,CACdF,SAAU,gBACVN,OAAQ,0FAGhB,CACIF,UAAW,aACXE,OAAQ,+IACRC,QAAS,mBACTC,QAAS,QACTM,iBAAkB,CACdF,SAAU,iBACVN,OAAQ,uDAGhB,CACIF,UAAW,aACXE,OAAQ,+IACRC,QAAS,oBACTC,QAAS,OACTM,iBAAkB,CACdF,SAAU,eACVN,OAAQ,gGCCDS,E,2MA9BbC,MAAM,CACJC,aAAc,EACdN,KAAM,I,yEAEEO,GAELL,EAAOZ,KAAKe,MAAMC,aAAa,GAClChB,KAAKkB,SAAS,CAACF,aAAchB,KAAKe,MAAMC,aAAc,EAAGN,KAAK,KAI9DV,KAAKkB,SAAS,CAACF,aAAc,EAAEN,KAAK,O,oCAI1BO,GACZjB,KAAKkB,SAAS,CAACR,KAAM,kBAAC,EAAD,CAAWA,KAAME,EAAOZ,KAAKe,MAAMC,cAAcH,uB,+BAE7D,IAAD,OACN,OACE,yBAAKM,UAAU,QACb,4BAAQC,QAAS,SAACH,GAAD,OAAK,EAAKI,UAAUJ,KAArC,cACA,4BAAQG,QAAS,SAACH,GAAD,OAAO,EAAKK,cAAcL,KAA3C,qBACA,kBAAC,EAAD,CAAOf,MAAOU,EAAOZ,KAAKe,MAAMC,gBAC/BhB,KAAKe,MAAML,U,GAzBFF,aCKEe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.0596378f.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nclass House extends Component{\r\n  render(){\r\n    return(\r\n      <div>\r\n        <h1>{this.props.house.houseName}</h1>\r\n        <img src={this.props.house.imgSrc}/>\r\n        <h3>Fouder: {this.props.house.founder}</h3>\r\n        <h3>Element:{this.props.house.element}</h3>\r\n      </div>\r\n    )\r\n  }\r\n\r\n}\r\nexport default House","import React, {Component} from 'react';\r\n\r\n\r\nclass Character extends Component{\r\n  render(){\r\n    return(\r\n      <div>\r\n        <h3>{this.props.char.charName}</h3>\r\n        <img src={this.props.char.imgSrc}/>\r\n      </div>\r\n    )\r\n  }\r\n\r\n}\r\nexport default Character","const houses = [{\r\n    houseName: \"Slytherin\",\r\n    imgSrc: \"https://vignette.wikia.nocookie.net/harrypotter/images/0/00/Slytherin_ClearBG.png/revision/latest/scale-to-width-down/350?cb=20161020182557\",\r\n    founder: \"Salazar Slytherin\",\r\n    element: \"water\",\r\n    notableCharacter: {\r\n        charName: \"Draco Malfoy\",\r\n        imgSrc: \"https://pm1.narvii.com/6120/a9da34522b98393e52f0347fd14e6e98e296ff4f_hq.jpg\",\r\n    }\r\n},\r\n{\r\n    houseName: \"Ravenclaw\",\r\n    imgSrc: \"https://vignette.wikia.nocookie.net/harrypotter/images/4/4e/RavenclawCrest.png/revision/latest/scale-to-width-down/350?cb=20161020182442\",\r\n    founder: \"Rowena Ravenclaw\",\r\n    element: \"air\",\r\n    notableCharacter: {\r\n        charName: \"Luna Lovegood\",\r\n        imgSrc: \"http://www.electricferret.com/static/images/cbub/cbub_contender_image/6/5236/5236.jpg\",\r\n    }\r\n},\r\n{\r\n    houseName: \"Hufflepuff\",\r\n    imgSrc: \"https://vignette.wikia.nocookie.net/harrypotter/images/0/06/Hufflepuff_ClearBG.png/revision/latest/scale-to-width-down/350?cb=20161020182518\",\r\n    founder: \"Helga Hufflepuff\",\r\n    element: \"earth\",\r\n    notableCharacter: {\r\n        charName: \"Cedric Diggory\",\r\n        imgSrc: \"http://www.postavy.cz/foto/cedric-diggory-foto.jpg\",\r\n    }\r\n},\r\n{\r\n    houseName: \"Gryffindor\",\r\n    imgSrc: \"https://vignette.wikia.nocookie.net/harrypotter/images/b/b1/Gryffindor_ClearBG.png/revision/latest/scale-to-width-down/350?cb=20190222162949\",\r\n    founder: \"Godric Gryffindor\",\r\n    element: \"fire\",\r\n    notableCharacter: {\r\n        charName: \"Harry Potter\",\r\n        imgSrc: \"https://bigkidatheart.com/wp-content/uploads/2017/06/harry-potter-with-glasses-200x200.png\",\r\n    }\r\n},\r\n]\r\n\r\nexport default houses;","import React, {Component} from 'react';\n\nimport './App.css';\nimport House from './House'\nimport Character from './Character'\nimport houses from './DB'\n\nclass App extends Component{\n  state={\n    currentIndex: 0,\n    char: \"\"\n  }\n  nextHouse(e){\n   \n    if(houses[this.state.currentIndex+1]){\n    this.setState({currentIndex: this.state.currentIndex +1, char:\"\" })\n  }\n  \n  else{\n    this.setState({currentIndex: 0,char:\"\"})\n  }\n  // console.log(houses[this.state.currentIndex+1])\n}\nshowCharacter(e){\n  this.setState({char: <Character char={houses[this.state.currentIndex].notableCharacter}/>})\n}\n  render(){\n    return(\n      <div className=\"card\">\n        <button onClick={(e)=>this.nextHouse(e)}>Next House</button>\n        <button onClick={(e) => this.showCharacter(e)}>Notable Character</button>\n        <House house={houses[this.state.currentIndex]}/>\n        {this.state.char}\n      </div>\n    )\n  }\n\n}\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}